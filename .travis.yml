language: haskell
# NB: don't set `language: haskell` here
#  huh?

# The following enables several GHC versions to be tested; often it's enough to test only against the last release in a major GHC version. Feel free to omit lines listings versions you don't need/want testing for.
env:
  - GHCVER=7.8.4 CABALVER=1.20
  - GHCVER=7.10.1 CABALVER=1.22
  - GHCVER=7.10.2 CABALVER=1.22
  - GHCVER=head  CABALVER=head
matrix:
  allow_failures:
   - env: GHCVER=head  CABALVER=head


# Note: the distinction between `before_install` and `install` is not important.
before_install:
  - travis_retry sudo add-apt-repository -y ppa:hvr/ghc
  - travis_retry sudo apt-get update
  - travis_retry sudo apt-get install llvm
  - travis_retry sudo apt-get install libblas-dev liblapack-dev
  - travis_retry sudo apt-get install cabal-install-$CABALVER ghc-$GHCVER
  - export PATH=/opt/ghc/$GHCVER/bin:/opt/cabal/$CABALVER/bin:$PATH
  - cabal --version

install:
  - sudo /opt/ghc/$GHCVER/bin/ghc-pkg recache
  - /opt/ghc/$GHCVER/bin/ghc-pkg recache --user # i dont remember why i do this, need to aduti
  - cabal update
  # - function stm-head { if [ '$GHCVER' = 'head' ]; then  cabal install stm --allow-newer ; else echo 'stm not head' fi }
  # - stm-head
  # - function async-head {if [ '$GHCVER' = 'head' ]; then  cabal install async --allow-newer  --dry ; else echo 'async not head' fi }
  # - async-head
  - cabal install --only-dependencies --enable-tests --enable-benchmarks

# Here starts the actual work to be performed for the package under test; any command which exits with a non-zero exit code causes the build to fail.
script:
  # currently Async cant build with ghc head : '(
  - cabal configure  -flib-Werror --enable-tests --enable-benchmarks -v2
  - cabal build   # this builds all libraries and executables (including tests/benchmarks)
  -  cabal test   --show-details=always ;
  # - cabal check
  - cabal sdist   # tests that a source-distribution can be generated

  # The following scriptlet checks that the resulting source distribution can be built & installed
  - function install_from_tarball {
   export SRC_TGZ=$(cabal info . | awk '{print $2 ".tar.gz";exit}') ;
   if [ -f "dist/$SRC_TGZ" ]; then
      cabal install "dist/$SRC_TGZ";
   else
      echo "expected 'dist/$SRC_TGZ' not found";
      exit 1;
   fi
   }
  - install_from_tarball


notifications:
  email: false
  irc:
    channels:
      - "irc.freenode.org#numerical-haskell" # this is the public channel, go here :)
    skip_join: true
    template:
      - "\x0313 alpha numerical coming soon  \x03/\x0306%{branch}\x03 \x0314%{commit}\x03 %{build_url} %{message}"
